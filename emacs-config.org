#+TITLE: Emacs config for Einar
#+DESCRIPTION: Org-babel based emacs config
#+LANGUAGE: en
#+PROPERTY: results silent

* Init
** Ensure env variables from shell to emacs
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure t)
#+END_SRC
** Move custom variables to own file
   #+begin_src emacs-lisp
     (setq custom-file "~/.emacs.d/custom.el")
     (load-file custom-file)
   #+end_src

** Move backup files to own directory

   #+begin_src emacs-lisp
     (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
   #+end_src
** Security
   #+begin_src emacs-lisp
     (setq gnutls-verify-error t)
     (setq gnutls-min-prime-bits 2048)
     (setq network-security-level 'high)
     (setq nsm-save-host-names t)
   #+end_src

* Styling

** Remove startup welcome screen

#+BEGIN_SRC emacs-lisp
(custom-set-variables
'(inhibit-startup-screen t))
#+END_SRC

** Set theme

#+BEGIN_SRC emacs-lisp
    (use-package zenburn-theme
      :ensure t
      :config
      (load-theme 'zenburn t))
#+END_SRC

* Org-mode
** Get org-templates (<s++)
#+begin_src elisp-mode
(require 'org-tempo)
#+end_src
** Org-present
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/org-present")
(autoload 'org-present "org-present" nil t)

(eval-after-load "org-present"
  '(progn
     (add-hook 'org-present-mode-hook
               (lambda ()
                 (org-present-big)
                 (org-display-inline-images)
                 (org-present-hide-cursor)
                 (org-present-read-only)))
     (add-hook 'org-present-mode-quit-hook
               (lambda ()
                 (org-present-small)
                 (org-remove-inline-images)
                 (org-present-show-cursor)
                 (org-present-read-write)))))
#+END_SRC

** Org-babel
#+BEGIN_SRC emacs-lisp
  (require 'ob-C)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (R . t)
     (shell . t)
     (emacs-lisp . t)
     (gnuplot . t)
     (C . t)))
#+END_SRC

** Org-calendar
   #+begin_src emacs-lisp
     (setq org-agenda-include-diary t)
   #+end_src

* Python

** Set python interpreter to python3
#+BEGIN_SRC emacs-lisp
(setq python-shell-interpreter "/usr/bin/python3")
#+END_SRC

* Packages
** Helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :bind (("M-x" . helm-M-x)
	   ("C-x b" . helm-buffers-list))
    :config
    (helm-mode 1))
#+END_SRC

** Paredit
   #+begin_src emacs-lisp
     (use-package paredit
       :ensure t)
   #+end_src

** Restclient
   #+begin_src emacs-lisp
     (use-package restclient)
   #+end_src

** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :config
    (setq magit-save-repository-buffers nil))
#+END_SRC

** Company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC

** Pdf-tools
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :ensure t)
#+END_SRC
* Work
** Elveg 2.0
*** FME script
    #+begin_src emacs-lisp
      (defconst *fme-exe* "/mnt/c/Program Files/FME/fme.exe")

      (defconst *nvdb2gml* "C:/DATA/GIT/SOSI-Vegnett/FME/nvdbapi2gml_V3.fmw")

      (defconst *nvdb2elveg* "C:/DATA/GIT/SOSI-Vegnett/FME/makeMultipleKnr.fmw")

      (defun fme/nvdb2gml (kommunenr)
      (interactive "sKommunenr: ")
	(start-process (concat "nvdb2elveg" kommunenr)
		       kommunenr
		       ,*fme-exe* *nvdb2gml*
		       "--kommune" kommunenr))

      (defun fme/nvdb2elveg (kommunenr)
      (interactive "sKommunenr (kommasep): ")
	(start-process (concat "nvdb2elveg" kommunenr)
		       kommunenr
		       ,*fme-exe* *nvdb2elveg*
		       "--kommune" kommunenr))
    #+end_src
